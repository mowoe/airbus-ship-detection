# -*- coding: utf-8 -*-
"""Airbus Ship Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T5KrXZneJjvQAxIFVxo5MH0WHXd2gZpR
"""

!pip install --upgrade keras

!pip uninstall mrcnn
!git clone https://github.com/matterport/Mask_RCNN.git
!cd Mask_RCNN && python3 setup.py install

!wget https://raw.githubusercontent.com/matterport/Mask_RCNN/master/mrcnn/model.py -O /usr/local/lib/python3.6/dist-packages/mrcnn/model.py

"""# NOW RESTART RUNTIME!"""

!pip install -q kaggle
import time
import zipfile
import os
import json
import cv2
import keras
import os

keras.__version__

from google.colab import files
files.upload()

ROOT_DIR = os.path.abspath("/content/")
MODEL_DIR = os.path.join(ROOT_DIR, "logs")

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 /root/.kaggle/kaggle.json

start = time.time()
!kaggle competitions download airbus-ship-detection
print("downloading dataset took {} seconds".format(time.time()-start))

for file in ["/content/test_v2.zip","/content/train_v2.zip","/content/train_ship_segmentations_v2.csv.zip"]:
    zip_ref = zipfile.ZipFile(file, 'r')
    zip_ref.extractall()
    zip_ref.close()
    print(file)

import PIL
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("/content/train_ship_segmentations_v2.csv").dropna()
df.index = np.arange(0, len(df))
display(df[:10])
print(df.ImageId[0])

from skimage.segmentation import mark_boundaries
from skimage.measure import label, regionprops
from skimage.util.montage import montage2d as montage

def masks_as_image(in_mask_list, all_masks=None):
    # Take the individual ship masks and create a single mask array for all ships
    if all_masks is None:
        all_masks = np.zeros((768, 768), dtype = np.int16)
    #if isinstance(in_mask_list, list):
    for mask in in_mask_list:
        if isinstance(mask, str):
            all_masks += rle_decode(mask)
    return np.expand_dims(all_masks, -1)
  
def rle_encode(img):
    '''
    img: numpy array, 1 - mask, 0 - background
    Returns run length as string formated
    '''
    pixels = img.T.flatten()
    pixels = np.concatenate([[0], pixels, [0]])
    runs = np.where(pixels[1:] != pixels[:-1])[0] + 1
    runs[1::2] -= runs[::2]
    return ' '.join(str(x) for x in runs)

def rle_decode(mask_rle, shape=(768, 768)):
    '''
    mask_rle: run-length as string formated (start length)
    shape: (height,width) of array to return 
    Returns numpy array, 1 - mask, 0 - background
    '''
    s = mask_rle.split()
    starts, lengths = [np.asarray(x, dtype=int) for x in (s[0:][::2], s[1:][::2])]
    starts -= 1
    ends = starts + lengths
    img = np.zeros(shape[0]*shape[1], dtype=np.uint8)
    for lo, hi in zip(starts, ends):
        img[lo:hi] = 1
    return img.reshape(shape).T  # Needed to align to RLE direction

from mrcnn.config import Config
from mrcnn import utils
import mrcnn
import mrcnn.model as modellib
from mrcnn import visualize
from mrcnn.model import log
from tqdm import tqdm

only_ships_df = df[df.EncodedPixels.isnull()==False]

class ShipsDatasetOne(mrcnn.utils.Dataset):
  def load_dataset(self, dataset_frame, width, height):
    self.dataset_frame = dataset_frame
    self.add_class("ships", 1, "ship")
    count = 0
    for x in tqdm(dataset_frame.ImageId.unique()):
      ships = []
      for b in range(len(df.query('ImageId=="'+x+'"')['EncodedPixels'])):
        ships.append("ship")
      self.add_image("ships", image_id=count, path=x,
                    width=width, height=height,
                    ships=ships)
      count+=1
      
  
  def load_image(self,image_id):
    info = self.image_info[image_id]
    if info["id"] == image_id:
      ships = info['ships']
      filename = info['path']
      image = cv2.imread("/content/"+filename)
      return image
    else:
      print("FATAL ERROR! NOT MATHCING IDs")
  
  def load_mask(self,image_id):
    info = self.image_info[image_id]
    assert info["id"] == image_id
    ships = info['ships']
    filename = info['path']
    rle_0 = df.query('ImageId=="'+filename+'"')['EncodedPixels']
    mask = masks_as_image(rle_0) 
    class_ids = np.array([self.class_names.index(s) for s in ships])
    return mask.astype(np.bool), class_ids.astype(np.int32)
  
  def image_reference(self, image_id):
    info = self.image_info[image_id]
    return info['ships']

class ShipsDataset(mrcnn.utils.Dataset):
  def load_dataset(self, dataset_frame, width, height, count, start=0):
    self.add_class("shapes", 1, "square")
    self.add_class("shapes", 2, "circle")
    self.add_class("shapes", 3, "triangle")
    dataset_frame.index = np.arange(0, count)
    for i in range(start,count):
      shapes = []
      filename = dataset_frame.ImageId[i]
      for b in range(len(df.query('ImageId=="'+filename+'"')['EncodedPixels'])):
        shapes.append("square")
      self.add_image("shapes", image_id=i, path=filename,
                    width=width, height=height,
                    shapes=shapes)
      
  
  def load_image(self,image_id):
    info = self.image_info[image_id]
    assert info["id"] == image_id
    filename = info['path']
    image = cv2.imread("/content/"+filename,0)
    return image
    
  
  def load_mask(self,image_id):
    info = self.image_info[image_id]
    assert info["id"] == image_id
    shapes = info['shapes']
    filename = info['path']
    rle_0 = df.query('ImageId=="'+filename+'"')['EncodedPixels']
    mask = masks_as_image(rle_0) 
    class_ids = np.array([self.class_names.index(s) for s in shapes])
    return mask.astype(np.bool), class_ids.astype(np.int32)
  
  def image_reference(self, image_id):
    info = self.image_info[image_id]
    if info["source"] == "shapes":
        return info["shapes"]
    else:
        super(self.__class__).image_reference(self, image_id)

dataset_train = ShipsDataset()
dataset_train.load_dataset(only_ships_df[:1000],768,768,1000)

dataset_val = ShipsDataset()
dataset_val.load_dataset(only_ships_df[-1000:],768,768,1000)

dataset_val.prepare()
dataset_train.prepare()

print(dataset_val.class_ids)
print(dataset_val.image_info[0])
mask, class_ids = dataset_train.load_mask(0)
print(class_ids)
print(mask.shape)

image_ids = np.random.choice(dataset_train.image_ids, 4)
for image_id in image_ids:
    image = dataset_train.load_image(image_id)
    mask, class_ids = dataset_train.load_mask(image_id)
    visualize.display_top_masks(image, mask, class_ids, dataset_train.class_names)

class ShapesConfig(Config):
    """Configuration for training on the toy shapes dataset.
    Derives from the base Config class and overrides values specific
    to the toy shapes dataset.
    """
    # Give the configuration a recognizable name
    NAME = "ships"

    # Train on 1 GPU and 8 images per GPU. We can put multiple images on each
    # GPU because the images are small. Batch size is 8 (GPUs * images/GPU).
    GPU_COUNT = 1
    IMAGES_PER_GPU = 8

    # Number of classes (including background)
    NUM_CLASSES = 1 + 1  # background + 3 ships

    # Use small images for faster training. Set the limits of the small side
    # the large side, and that determines the image shape.
    IMAGE_MIN_DIM = 768
    IMAGE_MAX_DIM = 768

    # Use smaller anchors because our image and objects are small
    #RPN_ANCHOR_SCALES = (8, 16, 32, 64, 128)  # anchor side in pixels

    # Reduce training ROIs per image because the images are small and have
    # few objects. Aim to allow ROI sampling to pick 33% positive ROIs.
    TRAIN_ROIS_PER_IMAGE = 32

    # Use a small epoch since the data is simple
    STEPS_PER_EPOCH = 500

    # use small validation steps since the epoch is small
    VALIDATION_STEPS = 5
    
config = ShapesConfig()

model = modellib.MaskRCNN(mode="training", config=config,
                          model_dir=MODEL_DIR)

# Which weights to start with?
init_with = "coco"  # @param ["imagenet", "coco", "last"]

if init_with == "imagenet":
    model.load_weights(model.get_imagenet_weights(), by_name=True)
elif init_with == "coco":
    # Load weights trained on MS COCO, but skip layers that
    # are different due to the different number of classes
    # See README for instructions to download the COCO weights
    !wget -O mask_rcnn_coco.h5 https://github.com/matterport/Mask_RCNN/releases/download/v2.0/mask_rcnn_coco.h5
    COCO_MODEL_PATH = os.path.join(ROOT_DIR, "mask_rcnn_coco.h5")
    model.load_weights(COCO_MODEL_PATH, by_name=True,
                       exclude=["mrcnn_class_logits", "mrcnn_bbox_fc", 
                                "mrcnn_bbox", "mrcnn_mask"])
elif init_with == "last":
    # Load the last model you trained and continue training
    model.load_weights(model.find_last(), by_name=True)

# Train the head branches
# Passing layers="heads" freezes all layers except the head
# layers. You can also pass a regular expression to select
# which layers to train by name pattern.
model.train(dataset_train, dataset_test, 
            learning_rate=config.LEARNING_RATE, 
            epochs=1, 
            layers='heads')

